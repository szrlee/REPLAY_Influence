import argparse
import warnings
from pathlib import Path
import shutil # For rmtree
import os # For remove and listdir

# Project-specific imports from src directory
from src.config import (
    ensure_output_dirs_exist,
    MAGIC_SCORES_DIR, MAGIC_TARGET_VAL_IMAGE_IDX, MAGIC_CHECKPOINTS_DIR, MAGIC_PLOTS_DIR,
    LDS_TARGET_VAL_IMAGE_IDX_FOR_CORRELATION
)
from src.utils import set_seeds # Though individual scripts also call it
from src.magic_analyzer import run_magic_analysis
from src.lds_validator import run_lds_validation

def clean_magic_output_files():
    """Cleans up output files generated by the MAGIC analysis."""
    print("--- Cleaning MAGIC Analysis Output Files ---")

    # Construct file paths
    scores_file = MAGIC_SCORES_DIR / f'magic_scores_val_{MAGIC_TARGET_VAL_IMAGE_IDX}.pkl'
    plot_file = MAGIC_PLOTS_DIR / f'magic_influence_val_{MAGIC_TARGET_VAL_IMAGE_IDX}.png'

    # Delete scores file
    if scores_file.exists():
        try:
            os.remove(scores_file)
            print(f"Deleted MAGIC scores file: {scores_file}")
        except OSError as e:
            print(f"Error deleting scores file {scores_file}: {e.strerror}")
    else:
        print(f"MAGIC scores file not found (already clean or not generated): {scores_file}")

    # Delete plot file
    if plot_file.exists():
        try:
            os.remove(plot_file)
            print(f"Deleted MAGIC plot file: {plot_file}")
        except OSError as e:
            print(f"Error deleting plot file {plot_file}: {e.strerror}")
    else:
        print(f"MAGIC plot file not found (already clean or not generated): {plot_file}")

    # Delete contents of checkpoints directory
    if MAGIC_CHECKPOINTS_DIR.exists() and MAGIC_CHECKPOINTS_DIR.is_dir():
        print(f"Cleaning MAGIC checkpoints directory: {MAGIC_CHECKPOINTS_DIR}")
        deleted_count = 0
        for item_name in os.listdir(MAGIC_CHECKPOINTS_DIR):
            item_path = MAGIC_CHECKPOINTS_DIR / item_name
            try:
                if item_path.is_file() or item_path.is_symlink():
                    os.remove(item_path)
                    deleted_count += 1
                # Optionally, if subdirectories could exist and need removal:
                # elif item_path.is_dir():
                #     shutil.rmtree(item_path)
                #     deleted_count += 1 
            except OSError as e:
                print(f"Error deleting item {item_path} in checkpoints dir: {e.strerror}")
        if deleted_count > 0:
            print(f"Deleted {deleted_count} items from {MAGIC_CHECKPOINTS_DIR}")
        else:
            print(f"No files found to delete in {MAGIC_CHECKPOINTS_DIR}.")
    else:
        print(f"MAGIC checkpoints directory not found or is not a directory: {MAGIC_CHECKPOINTS_DIR}")
    
    print("--- MAGIC Analysis Output Cleaning Finished ---")

def main():
    parser = argparse.ArgumentParser(description="Run Influence Analysis Project (MAGIC and LDS).")
    parser.add_argument("--run_magic", action="store_true", help="Run the MAGIC influence analysis.")
    parser.add_argument("--run_lds", action="store_true", help="Run the LDS validation analysis.")
    parser.add_argument("--clean_magic", action="store_true", help="Clean up output files from a previous MAGIC analysis run.")
    parser.add_argument("--magic_scores_file", type=str, default=None,
                        help="Path to pre-computed MAGIC scores .pkl file (for LDS if not running MAGIC first).")
    
    # Could add more arguments here to override config.py settings, e.g.:
    # parser.add_argument("--magic_target_idx", type=int, default=MAGIC_TARGET_VAL_IMAGE_IDX)
    # parser.add_argument("--lds_target_idx", type=int, default=LDS_TARGET_VAL_IMAGE_IDX_FOR_CORRELATION)

    args = parser.parse_args()

    # Ensure all output directories are set up first
    ensure_output_dirs_exist()
    # Set global seed for reproducibility if any top-level random ops before module calls
    # set_seeds(RANDOM_SEED) # Individual modules also set seeds for their specific ops

    warnings.filterwarnings('ignore') # Global warning filter

    if args.clean_magic:
        clean_magic_output_files()
        # Decide if we should exit after cleaning or allow other operations.
        # For now, let's assume cleaning is an exclusive action if specified and no other run actions are given.
        if not (args.run_magic or args.run_lds):
            return

    computed_magic_scores_path = None

    if args.run_magic:
        print("--- Running MAGIC Influence Analysis ---")
        # run_magic_analysis returns the scores, which might be useful if chaining immediately
        # For now, LDS validator will load from file as per its design.
        run_magic_analysis() 
        # Set path for LDS if it's run next in the same call
        # This assumes MAGIC_TARGET_VAL_IMAGE_IDX is the one LDS validator expects for correlation
        if MAGIC_TARGET_VAL_IMAGE_IDX == LDS_TARGET_VAL_IMAGE_IDX_FOR_CORRELATION:
             computed_magic_scores_path = MAGIC_SCORES_DIR / f'magic_scores_val_{MAGIC_TARGET_VAL_IMAGE_IDX}.pkl'
        else:
            print(f"Warning: MAGIC analysis target index ({MAGIC_TARGET_VAL_IMAGE_IDX}) differs from "
                  f"LDS correlation target index ({LDS_TARGET_VAL_IMAGE_IDX_FOR_CORRELATION}). "
                  f"LDS might not find the correct scores file unless specified via --magic_scores_file.")
        print("--- MAGIC Influence Analysis Finished ---")

    if args.run_lds:
        print("\n--- Running LDS Validation Analysis ---")
        
        lds_magic_scores_input_path = None
        if args.magic_scores_file:
            lds_magic_scores_input_path = Path(args.magic_scores_file)
            if not lds_magic_scores_input_path.exists():
                print(f"Error: Provided MAGIC scores file for LDS not found: {lds_magic_scores_input_path}")
                return # or raise error
        elif computed_magic_scores_path and computed_magic_scores_path.exists():
            # Use path from MAGIC run if it was just completed and matches LDS target
            lds_magic_scores_input_path = computed_magic_scores_path
        else:
            # Default path if not run_magic and no specific file given
            # This relies on LDS_TARGET_VAL_IMAGE_IDX_FOR_CORRELATION from config
            default_lds_scores_path = MAGIC_SCORES_DIR / f'magic_scores_val_{LDS_TARGET_VAL_IMAGE_IDX_FOR_CORRELATION}.pkl'
            if default_lds_scores_path.exists():
                lds_magic_scores_input_path = default_lds_scores_path
            else:
                print(f"Error: Could not determine MAGIC scores file for LDS. "
                      f"Tried default: {default_lds_scores_path}. "
                      f"Please run MAGIC analysis first or specify with --magic_scores_file.")
                return # or raise error

        if lds_magic_scores_input_path:
            run_lds_validation(precomputed_magic_scores_path=lds_magic_scores_input_path)
        else:
            # This case should ideally be caught by the checks above
            print("Error: MAGIC scores path for LDS validation is missing.")

        print("--- LDS Validation Analysis Finished ---")

    if not args.run_magic and not args.run_lds and not args.clean_magic:
        print("No analysis or cleanup specified. Use --run_magic, --run_lds, or --clean_magic.")
        parser.print_help()

if __name__ == "__main__":
    main() 