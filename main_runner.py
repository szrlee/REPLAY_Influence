import argparse
import warnings
from pathlib import Path
import shutil # For rmtree
import os

# Project-specific imports from src directory
from src import config # Import the whole module for easier access to new path functions
from src.utils import set_seeds
from src.magic_analyzer import MagicAnalyzer # Import the class
from src.lds_validator import run_lds_validation # Still using the function from lds_validator

def clean_magic_output_files():
    """Cleans up output files generated by the MAGIC analysis, updated for new structure."""
    print("--- Cleaning MAGIC Analysis Output Files (New Structure) ---")

    # Files and Dirs to clean based on revised config and MagicAnalyzer logic
    batch_dict_file = config.BATCH_DICT_FILE
    # Scores file (per-step) - construct using target_idx from config
    scores_file = config.get_magic_scores_path(target_idx=config.MAGIC_TARGET_VAL_IMAGE_IDX)
    # Plot file - construct using target_idx from config
    plot_file = config.MAGIC_PLOTS_DIR / f"magic_influence_val_{config.MAGIC_TARGET_VAL_IMAGE_IDX}.png" # Match plotting output

    files_to_delete = [batch_dict_file, scores_file, plot_file]
    for f_path in files_to_delete:
        if f_path.exists():
            try:
                os.remove(f_path)
                print(f"Deleted: {f_path}")
            except OSError as e:
                print(f"Error deleting {f_path}: {e.strerror}")
        else:
            print(f"Not found (already clean or not generated): {f_path}")

    # Clean Checkpoints Directory (MAGIC_CHECKPOINTS_DIR)
    if config.MAGIC_CHECKPOINTS_DIR.exists() and config.MAGIC_CHECKPOINTS_DIR.is_dir():
        print(f"Cleaning MAGIC checkpoints directory: {config.MAGIC_CHECKPOINTS_DIR}")
        try:
            # Remove all files and subdirectories within MAGIC_CHECKPOINTS_DIR
            # This is safer than iterating if only checkpoints are expected.
            # If other important subdirs could exist, iterate and check.
            for item in config.MAGIC_CHECKPOINTS_DIR.iterdir():
                if item.is_dir():
                    shutil.rmtree(item)
                else:
                    os.remove(item)
            print(f"Cleaned contents of {config.MAGIC_CHECKPOINTS_DIR}")
        except OSError as e:
            print(f"Error cleaning {config.MAGIC_CHECKPOINTS_DIR}: {e.strerror}")
    else:
        print(f"MAGIC checkpoints directory not found: {config.MAGIC_CHECKPOINTS_DIR}")
    
    print("--- MAGIC Analysis Output Cleaning Finished ---")


def main():
    parser = argparse.ArgumentParser(description="Run Influence Analysis Project (MAGIC and LDS).")
    parser.add_argument("--run_magic", action="store_true", help="Run the MAGIC influence analysis.")
    parser.add_argument("--run_lds", action="store_true", help="Run the LDS validation analysis.")
    parser.add_argument("--clean_magic", action="store_true", help="Clean up output files from a previous MAGIC analysis run.")
    
    # Args for MAGIC
    parser.add_argument("--force_retrain_magic", action="store_true", help="Force retraining of the MAGIC model and batch collection.")
    parser.add_argument("--force_recompute_magic_scores", action="store_true", help="Force recomputation of MAGIC influence scores.")
    # parser.add_argument("--magic_target_idx", type=int, default=config.MAGIC_TARGET_VAL_IMAGE_IDX, 
    #                     help=f"Target validation image index for MAGIC. Default: {config.MAGIC_TARGET_VAL_IMAGE_IDX}")

    # Args for LDS
    parser.add_argument("--magic_scores_file_for_lds", type=str, default=None,
                        help="Path to pre-computed MAGIC scores .pkl file for LDS. "
                             "If None, uses default from MAGIC run or config.")
    # parser.add_argument("--lds_target_idx", type=int, default=config.LDS_TARGET_VAL_IMAGE_IDX_FOR_CORRELATION,
    #                     help=f"Target validation image index for LDS correlation. Default: {config.LDS_TARGET_VAL_IMAGE_IDX_FOR_CORRELATION}")


    args = parser.parse_args()

    # Ensure all output directories are set up first (from original config.py, may need adjustment if removed)
    # config.ensure_output_dirs_exist() # This function was removed from the revised config.py
    # Directories are now created by the analyzer/validator classes or within config path getters for clarity.
    # For safety, can call them here if needed, or rely on individual components.
    config.OUTPUTS_DIR.mkdir(parents=True, exist_ok=True)
    config.MAGIC_CHECKPOINTS_DIR.mkdir(parents=True, exist_ok=True)
    config.MAGIC_SCORES_DIR.mkdir(parents=True, exist_ok=True)
    config.MAGIC_PLOTS_DIR.mkdir(parents=True, exist_ok=True)
    config.LDS_CHECKPOINTS_DIR.mkdir(parents=True, exist_ok=True)
    config.LDS_LOSSES_DIR.mkdir(parents=True, exist_ok=True)
    config.LDS_PLOTS_DIR.mkdir(parents=True, exist_ok=True)
    if config.LDS_INDICES_FILE: # It's a Path object
        config.LDS_INDICES_FILE.parent.mkdir(parents=True, exist_ok=True)


    # Global seed and warnings
    set_seeds(config.SEED) # Set seed once at the top
    warnings.filterwarnings('ignore')

    if args.clean_magic:
        clean_magic_output_files()
        if not (args.run_magic or args.run_lds):
            return

    magic_scores_output_path_for_lds = None # Path to scores produced by MagicAnalyzer

    if args.run_magic:
        print("--- Running MAGIC Influence Analysis (Class Based) ---")
        analyzer = MagicAnalyzer() # Instantiate the analyzer
        
        # 1. Train model and collect states
        total_steps = analyzer.train_and_collect_intermediate_states(
            force_retrain=args.force_retrain_magic
        )
        
        # 2. Compute influence scores
        # compute_influence_scores now returns per-step scores
        per_step_scores = analyzer.compute_influence_scores(
            total_training_iterations=total_steps, 
            force_recompute=args.force_recompute_magic_scores
        )
        
        # 3. Plot influential images (using the per-step scores, plotting function sums them)
        if per_step_scores is not None:
            analyzer.plot_magic_influences(per_step_scores_or_path=per_step_scores)
        else:
            print("Skipping MAGIC plotting as scores were not computed or loaded.")
        
        # Path to the *per-step* scores file generated by MagicAnalyzer
        magic_scores_output_path_for_lds = config.get_magic_scores_path(
            target_idx=config.MAGIC_TARGET_VAL_IMAGE_IDX
        )
        print("--- MAGIC Influence Analysis Finished ---")

    if args.run_lds:
        print("\n--- Running LDS Validation Analysis ---")
        
        path_to_lds_input_scores = None
        if args.magic_scores_file_for_lds:
            path_to_lds_input_scores = Path(args.magic_scores_file_for_lds)
            if not path_to_lds_input_scores.exists():
                print(f"Error: Provided MAGIC scores file for LDS not found: {path_to_lds_input_scores}")
                return
        elif magic_scores_output_path_for_lds and magic_scores_output_path_for_lds.exists():
            # Use path from this session's MAGIC run if available
            path_to_lds_input_scores = magic_scores_output_path_for_lds
        else:
            # Fallback to default path from config (LDS validator will also try this if None is passed)
            # This should point to the per-step scores file that LDS validator expects to sum.
            default_lds_input_path = config.get_magic_scores_path(
                target_idx=config.LDS_TARGET_VAL_IMAGE_IDX_FOR_CORRELATION
            )
            if default_lds_input_path.exists():
                path_to_lds_input_scores = default_lds_input_path
            else: # Final check before LDS might fail internally
                 # Check if the config.MAGIC_SCORES_FILE_FOR_LDS_INPUT (which is the one lds_validator uses by default if path is None) exists
                if config.MAGIC_SCORES_FILE_FOR_LDS_INPUT.exists():
                     path_to_lds_input_scores = config.MAGIC_SCORES_FILE_FOR_LDS_INPUT
                else:
                    print(f"Error: Could not determine MAGIC scores file for LDS. "
                          f"Tried default: {default_lds_input_path} (and config.MAGIC_SCORES_FILE_FOR_LDS_INPUT: {config.MAGIC_SCORES_FILE_FOR_LDS_INPUT}). "
                          f"Please run MAGIC analysis first or specify with --magic_scores_file_for_lds.")
                    return

        if path_to_lds_input_scores:
             # run_lds_validation expects a path. It will handle loading and summing per-step scores.
            run_lds_validation(precomputed_magic_scores_path=path_to_lds_input_scores)
        else:
            # This path implies something went wrong with path resolution
            print("Error: Path to MAGIC scores for LDS validation could not be resolved.")

        print("--- LDS Validation Analysis Finished ---")

    if not args.run_magic and not args.run_lds and not args.clean_magic:
        print("No analysis or cleanup specified. Use --run_magic, --run_lds, or --clean_magic.")
        parser.print_help()

if __name__ == "__main__":
    main() 